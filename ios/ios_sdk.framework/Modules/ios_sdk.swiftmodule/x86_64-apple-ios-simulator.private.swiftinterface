// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ios_sdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import Foundation
import OSLog
import Swift
import _Concurrency
import _StringProcessing
@_exported import ios_sdk
@_inheritsConvenienceInitializers @objc public class Env : ObjectiveC.NSObject {
  @objc public static func setMode(_ mode: Swift.String)
  @objc public static func getLFApiUrl() -> Swift.String
  @objc public static func getExampleApiUrl() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class Device : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate {
  @objc public enum SourceType : Swift.Int {
    case cloud
    case bluetoothLowEnergy
    case mobilePhone
    case unknown
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum DeviceType : Swift.Int {
    case bloodPressureMonitor
    case continuousGlucoseMonitor
    case bloodGlucoseMeter
    case mobilePhone
    case pulseOximeter
    case smartScale
    case smartWatch
    case thermometer
    case unknown
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum ConnectionState : Swift.Int, Swift.Codable {
    case connecting
    case connected
    case disconnected
    case paired
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var delegate: ios_sdk.DeviceDelegate?
  public init(deviceId: Swift.String, sourceType: ios_sdk.Device.SourceType, deviceType: ios_sdk.Device.DeviceType, deviceModel: Swift.String? = nil, matchBluetoothNames: [Swift.String], matchBluetoothUuids: [Swift.String] = [], needsPairing: Swift.Bool = false, notifyEndpoint: Swift.String? = nil)
  @objc public func getDeviceUuid() -> Swift.String
  @objc public func getDeviceId() -> Swift.String
  @objc public func getSourceType() -> ios_sdk.Device.SourceType
  @objc public func getSourceTypeAsString() -> Swift.String
  @objc public func getDeviceType() -> ios_sdk.Device.DeviceType
  @objc public func getDeviceTypeAsString() -> Swift.String
  @objc public func getDeviceModel() -> Swift.String?
  @objc public func getBluetoothName() -> Swift.String?
  @objc public func getBluetoothUuid() -> Swift.String?
  @objc public func getNeedsPairing() -> Swift.Bool
  @objc public func getAutoTimeSync() -> Swift.Bool
  @objc public func getAutoNotify() -> Swift.Bool
  @objc public func getConnectionState() -> ios_sdk.Device.ConnectionState
  @objc public func getPeripheral() -> CoreBluetooth.CBPeripheral?
  @objc public func setMatchBluetoothNames(_ matchBluetoothNames: [Swift.String])
  @objc public func setMatchBluetoothUuids(_ matchBluetoothUuids: [Swift.String])
  @objc public func setAutoTimeSync(_ autoTimeSync: Swift.Bool)
  @objc public func setAutoNotify(_ autoNotify: Swift.Bool)
  @objc public func connect(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc public func disconnect()
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DeviceFactory : ObjectiveC.NSObject {
  @objc public static func createDevice(_ deviceId: Swift.String) -> ios_sdk.Device?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class JSONUtils : ObjectiveC.NSObject {
  @objc public static func dictToJSONString(_ data: [Swift.String : Any]) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DeviceScanner : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate {
  @objc public var delegate: ios_sdk.DeviceScannerDelegate?
  @objc override dynamic public init()
  @objc public func setSessionkey(_ sessionkey: Swift.String)
  @objc public func getDevices() -> [ios_sdk.Device]
  @objc public func getDeviceByUuid(_ uuid: Swift.String) -> ios_sdk.Device?
  @objc public func addDevice(_ device: ios_sdk.Device)
  @objc public func addDeviceByDeviceId(_ deviceId: Swift.String) -> ios_sdk.Device?
  @objc public func removeDevice(_ device: ios_sdk.Device)
  @objc public func clearDevices()
  @objc public func start()
  @objc public func stop()
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc deinit
}
@objc public enum MeasurementUnit : Swift.Int {
  case percentage
  case beatsPerMinute
  case micrograms
  case milligrams
  case grams
  case kilograms
  case ounces
  case pounds
  case centimeters
  case meters
  case kilometers
  case miles
  case inches
  case feet
  case liters
  case milliliters
  case fluidOuncesUs
  case millimolesPerLiter
  case milligramsPerDeciliter
  case millimetersOfMercury
  case watts
  case kilocaloriesPerDay
  case calories
  case kilocalories
  case joules
  case kilojoules
  case celsius
  case fahrenheit
  case metersPerSecond
  case kilometersPerHour
  case milesPerHour
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol DeviceScannerDelegate {
  @objc func onStateChange(_ state: Swift.String)
}
@objc public class Bridge : ObjectiveC.NSObject {
  @objc public enum ErrorCode : Swift.Int {
    case invalidDeviceId
    case invalidDeviceUuid
    case invalidAutoDevice
    case invalidMeasurementUnit
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public init(delegate: ios_sdk.BridgeDelegate)
  @objc public func envSetEnvMode(_ envMode: Swift.String)
  @objc public func backendSetSessionkey(_ sessionkey: Swift.String)
  @objc public func backendNotify(_ deviceId: Swift.String, data: Swift.String, onSuccess: @escaping (Swift.Bool) -> ())
  @objc public func deviceNew(_ deviceId: Swift.String)
  @objc public func deviceSetMatchBluetoothNames(_ deviceUuid: Swift.String, matchBluetoothNames: [Swift.String])
  @objc public func deviceSetMatchBluetoothMacAddresses(_ deviceUuid: Swift.String, matchBluetoothMacAddresses: [Swift.String])
  @objc public func deviceSetAutoTimeSync(_ deviceUuid: Swift.String, autoTimeSync: Swift.Bool)
  @objc public func deviceSetAutoNotify(_ deviceUuid: Swift.String, autoNotify: Swift.Bool)
  @objc public func deviceGetDeviceId(_ deviceUuid: Swift.String)
  @objc public func deviceGetSourceType(_ deviceUuid: Swift.String)
  @objc public func deviceGetDeviceType(_ deviceUuid: Swift.String)
  @objc public func deviceGetDeviceModel(_ deviceUuid: Swift.String)
  @objc public func deviceGetBluetoothName(_ deviceUuid: Swift.String)
  @objc public func deviceGetBluetoothMacAddress(_ deviceUuid: Swift.String)
  @objc public func deviceGetNeedsPairing(_ deviceUuid: Swift.String)
  @objc public func deviceDelete(_ deviceUuid: Swift.String)
  @objc public func autoDeviceSetFilterByDeviceIds(_ deviceUuid: Swift.String, filterByDeviceIds: [Swift.String]?)
  @objc public func autoDeviceGetFilterByDeviceIds(_ deviceUuid: Swift.String)
  @objc public func deviceScannerSetSessionkey(_ sessionkey: Swift.String)
  @objc public func deviceScannerAddDevice(_ deviceUuid: Swift.String)
  @objc public func deviceScannerClearDevices()
  @objc public func deviceScannerStart()
  @objc public func deviceScannerStop()
  @objc public func deviceCacheClear()
  @objc public func measurementUnitConversionUtilsConvert(_ value: Swift.Double, _ src: Swift.String, _ dst: Swift.String)
  @objc deinit
}
@objc public protocol BridgeDelegate {
  @objc func onSuccess(_ result: Any?)
  @objc func onError(_ errorCode: Swift.String, errorMessage: Swift.String, errorDetails: Swift.String?)
  @objc func onCallback(_ name: Swift.String, arguments: Swift.Dictionary<Swift.String, Any>)
}
@objc public protocol DeviceDelegate {
  @objc func onConnectionStateChange(_ state: Swift.String)
  @objc func onPublish(_ data: [Swift.String : Any])
}
extension ios_sdk.Device.SourceType : Swift.Equatable {}
extension ios_sdk.Device.SourceType : Swift.Hashable {}
extension ios_sdk.Device.SourceType : Swift.RawRepresentable {}
extension ios_sdk.Device.DeviceType : Swift.Equatable {}
extension ios_sdk.Device.DeviceType : Swift.Hashable {}
extension ios_sdk.Device.DeviceType : Swift.RawRepresentable {}
extension ios_sdk.Device.ConnectionState : Swift.Equatable {}
extension ios_sdk.Device.ConnectionState : Swift.Hashable {}
extension ios_sdk.Device.ConnectionState : Swift.RawRepresentable {}
extension ios_sdk.MeasurementUnit : Swift.Equatable {}
extension ios_sdk.MeasurementUnit : Swift.Hashable {}
extension ios_sdk.MeasurementUnit : Swift.RawRepresentable {}
extension ios_sdk.Bridge.ErrorCode : Swift.Equatable {}
extension ios_sdk.Bridge.ErrorCode : Swift.Hashable {}
extension ios_sdk.Bridge.ErrorCode : Swift.RawRepresentable {}
