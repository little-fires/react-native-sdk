#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef IOS_SDK_SWIFT_H
#define IOS_SDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ios_sdk",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@protocol DeviceDelegate;
@class NSString;
enum SourceType : NSInteger;
enum DeviceType : NSInteger;
enum ConnectionState : NSInteger;
@class CBPeripheral;
@class CBService;
@class CBCharacteristic;

/// Generic Bluetooth device
SWIFT_CLASS("_TtC7ios_sdk6Device")
@interface Device : NSObject <CBPeripheralDelegate>
@property (nonatomic, strong) id <DeviceDelegate> _Nullable delegate;
/// Returns device uuid
- (NSString * _Nonnull)getDeviceUuid SWIFT_WARN_UNUSED_RESULT;
/// Returns device id
- (NSString * _Nonnull)getDeviceId SWIFT_WARN_UNUSED_RESULT;
/// Returns source type
- (enum SourceType)getSourceType SWIFT_WARN_UNUSED_RESULT;
/// Returns source type as string
- (NSString * _Nonnull)getSourceTypeAsString SWIFT_WARN_UNUSED_RESULT;
/// Returns device type
- (enum DeviceType)getDeviceType SWIFT_WARN_UNUSED_RESULT;
/// Returns device type as string
- (NSString * _Nonnull)getDeviceTypeAsString SWIFT_WARN_UNUSED_RESULT;
/// Returns device model
- (NSString * _Nullable)getDeviceModel SWIFT_WARN_UNUSED_RESULT;
/// Returns Bluetooth name
- (NSString * _Nullable)getBluetoothName SWIFT_WARN_UNUSED_RESULT;
/// Returns Bluetooth uuid
- (NSString * _Nullable)getBluetoothUuid SWIFT_WARN_UNUSED_RESULT;
/// Returns flag to indicate if Bluetooth pairing is required
- (BOOL)getNeedsPairing SWIFT_WARN_UNUSED_RESULT;
/// Returns the device’s current connection state
- (enum ConnectionState)getConnectionState SWIFT_WARN_UNUSED_RESULT;
/// Returns the device’s connecting or connected Bluetooth peripheral
- (CBPeripheral * _Nullable)getPeripheral SWIFT_WARN_UNUSED_RESULT;
/// Sets the Bluetooth name to match against
/// \param matchBluetoothName Bluetooth name to match against
///
- (void)setMatchBluetoothName:(NSString * _Nonnull)matchBluetoothName;
/// Sets the Bluetooth uuid to match against
/// \param matchBluetoothUuid Bluetooth uuid to match against
///
- (void)setMatchBluetoothUuid:(NSString * _Nonnull)matchBluetoothUuid;
/// Indicates successful connection to Bluetooth peripheral
/// \param peripheral Connected Bluetooth peripheral
///
- (void)connect:(CBPeripheral * _Nonnull)peripheral;
/// Disconnects from Bluetooth peripheral
- (void)disconnect;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SourceType, open) {
  SourceTypeCloud = 0,
  SourceTypeBluetoothLowEnergy = 1,
  SourceTypeMobilePhone = 2,
  SourceTypeUnknown = 3,
};

typedef SWIFT_ENUM(NSInteger, DeviceType, open) {
  DeviceTypeBloodPressureMonitor = 0,
  DeviceTypeContinuousGlucoseMonitor = 1,
  DeviceTypeGlucoseMeter = 2,
  DeviceTypeMobilePhone = 3,
  DeviceTypePulseOximeter = 4,
  DeviceTypeSmartScale = 5,
  DeviceTypeSmartWatch = 6,
  DeviceTypeThermometer = 7,
  DeviceTypeUnknown = 8,
};

typedef SWIFT_ENUM(NSInteger, ConnectionState, open) {
  ConnectionStateConnecting = 0,
  ConnectionStateConnected = 1,
  ConnectionStateDisconnected = 2,
};


/// Handles <code>Device</code> related events
SWIFT_PROTOCOL("_TtP7ios_sdk14DeviceDelegate_")
@protocol DeviceDelegate
/// Called when connection state changes
/// \param state State options: <code>connecting</code>, <code>connected</code>, <code>disconnected</code>
///
- (void)onConnectionStateChange:(NSString * _Nonnull)state;
/// Called when new data is published
/// \param data Data published as dictionary
///
- (void)onPublish:(NSDictionary<NSString *, id> * _Nonnull)data;
@end


SWIFT_CLASS("_TtC7ios_sdk13DeviceFactory")
@interface DeviceFactory : NSObject
/// Creates a device with device id
/// \param deviceId Device id
///
///
/// returns:
/// A valid device on success, null otherwise
+ (Device * _Nullable)createDevice:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DeviceScannerDelegate;
@class CBCentralManager;
@class NSNumber;

/// Manages scanning of Bluetooth devices
SWIFT_CLASS("_TtC7ios_sdk13DeviceScanner")
@interface DeviceScanner : NSObject <CBCentralManagerDelegate>
@property (nonatomic, strong) id <DeviceScannerDelegate> _Nullable delegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets sessionkey for backend
/// \param sessionkey Backend sessionkey
///
- (void)setSessionkey:(NSString * _Nonnull)sessionkey;
/// Gets added devices
///
/// returns:
/// List of added devices
- (NSArray<Device *> * _Nonnull)getDevices SWIFT_WARN_UNUSED_RESULT;
/// Gets device by its UUID
/// \param uuid Device UUID
///
///
/// returns:
/// Device if found, nil otherwise
- (Device * _Nullable)getDeviceByUuid:(NSString * _Nonnull)uuid SWIFT_WARN_UNUSED_RESULT;
/// Adds a device for scanning
/// Device can be added even if scanning has started
/// \param device Device to be added for scanning
///
- (void)addDevice:(Device * _Nonnull)device;
/// Adds a device by device id  for scanning
/// Device can be added even if scanning has started
/// \param deviceId Device id
///
///
/// returns:
/// Added device on success, nil otherwise
- (Device * _Nullable)addDeviceByDeviceId:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
/// Removes a device from scanning
/// Device will be disconnected if connecting or connected
/// \param device Device to be added for scanning
///
- (void)removeDevice:(Device * _Nonnull)device;
/// Clears all devices
- (void)clearDevices;
/// Starts scanning for devices
/// If there are no devices added, the scanner will not activate scanning
- (void)start;
/// Stops scanner and disconnects all existing connected devices
- (void)stop;
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
@end


/// Handles <code>DeviceScanner</code> related events
SWIFT_PROTOCOL("_TtP7ios_sdk21DeviceScannerDelegate_")
@protocol DeviceScannerDelegate
/// Called when state changes
/// \param state State options: <code>started</code>, <code>stopped</code>
///
- (void)onStateChange:(NSString * _Nonnull)state;
@end


SWIFT_CLASS("_TtC7ios_sdk3Env")
@interface Env : NSObject
+ (void)setMode:(NSString * _Nonnull)mode;
+ (NSString * _Nonnull)getLFApiUrl SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getExampleApiUrl SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Useful JSON utilities
SWIFT_CLASS("_TtC7ios_sdk9JSONUtils")
@interface JSONUtils : NSObject
/// Convert dictonary to JSON string
/// \param data Data dictionary
///
///
/// returns:
/// Data formatted as JSON string on success, nil otherwise
+ (NSString * _Nullable)dictToJSONString:(NSDictionary<NSString *, id> * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
